using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Collections.Immutable;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis.CSharp;

namespace BehaviorGenerator;

[Generator]
public class BehaviorGenerator : IIncrementalGenerator
{
    /// <summary>
    /// BehaviorAi partial类上下文
    /// </summary>
    /// <param name="FileName"></param>
    /// <param name="DelegateContext"></param>
    private record struct BehaviorAiFileContext(string FileName, ImmutableArray<EventHandlerContext> DelegateContext);

    /// <summary>
    /// event handler上下文
    /// </summary>
    /// <param name="EventHandlerName">EventHandler的名称</param>
    /// <param name="SignalName">信号的名称</param>
    /// <param name="ParamNames">参数名称列表</param>
    private record struct EventHandlerContext(string EventHandlerName, string SignalName,
        ImmutableArray<string> ParamNames);

    private int _behaviorAiPartialClassCount;
    private int _behaviorAiPartialClassExecutedCount;

    private readonly IDictionary<string, BehaviorAiFileContext> _behaviorAiFileContexts =
        new Dictionary<string, BehaviorAiFileContext>();

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var valuesProvider = context.SyntaxProvider.CreateSyntaxProvider(SyntacticPredicate, SemanticTransform);

        context.RegisterSourceOutput(valuesProvider, Execute);
    }

    private void Execute(SourceProductionContext sourceProductionContext,
        BehaviorAiFileContext behaviorAiContext)
    {
        var lastBehaviorAiClass = ++_behaviorAiPartialClassExecutedCount == _behaviorAiPartialClassCount;
        var signalMethod = lastBehaviorAiClass
            ? $"{GenerateConnectSignalMethod()}\n\n{GenerateDisconnectSignalMethod()}"
            : "";
        var signalField = lastBehaviorAiClass ? $"{GenerateStaticField()}\n" : "";

        var getEventHandlerMethod = new StringBuilder(1024);
        foreach (var eventHandlerContext in behaviorAiContext.DelegateContext)
        {
            var paramJoin = string.Join(", ", eventHandlerContext.ParamNames);
            var paramSeparator = eventHandlerContext.ParamNames.IsEmpty ? "" : ", ";
            var signalName = eventHandlerContext.SignalName;
            var eventHandlerName = eventHandlerContext.EventHandlerName;
            var eventHandler = $@"    private {eventHandlerName} Get{eventHandlerName}()
    {{
        return ({paramJoin}) => OnSignal(SignalName.{signalName}{paramSeparator}{paramJoin});
    }}

";
            getEventHandlerMethod.Append(eventHandler);
        }

        var source = $@"// <auto-generated>

namespace Behavior.addons.Behavior;

public partial class BehaviorAi
{{
{signalField}
{getEventHandlerMethod}
{signalMethod}
}}
";

        sourceProductionContext.AddSource($"{behaviorAiContext.FileName.Replace("cs", "g.cs")}", source);
    }

    private bool SyntacticPredicate(SyntaxNode n, CancellationToken cancellationToken)
    {
        if (n is not ClassDeclarationSyntax classDeclarationSyntax)
        {
            return false;
        }

        if (!classDeclarationSyntax.Identifier.Text.Equals("BehaviorAi"))
        {
            return false;
        }

        _behaviorAiPartialClassCount++;
        return true;
    }

    private BehaviorAiFileContext SemanticTransform(GeneratorSyntaxContext context,
        CancellationToken cancellationToken)
    {
        Debug.Assert(context.Node is ClassDeclarationSyntax);

        var semanticModel = context.SemanticModel;
        //获取当前正在访问的Node
        var classSyntax = Unsafe.As<ClassDeclarationSyntax>(context.Node);
        var fileName = Path.GetFileName(classSyntax.SyntaxTree.FilePath);

        //找到所有的delegate定义
        var delegateSyntaxS = classSyntax.DescendantNodes().OfType<DelegateDeclarationSyntax>();
        var eventHandlerContexts = delegateSyntaxS
            //转换成symbol
            .Select(delegateSyntax => semanticModel.GetDeclaredSymbol(delegateSyntax, cancellationToken))
            //至少有一个Attribute包含[Signal]
            .Where(delegateSymbol => delegateSymbol.GetAttributes()
                .Any(attribute => attribute.AttributeClass.Name == "SignalAttribute"))
            .Where(delegateSymbol => delegateSymbol.Name.EndsWith("EventHandler"))
            .Select(eventHandlerSymbol => new EventHandlerContext(eventHandlerSymbol.Name,
                eventHandlerSymbol.Name.Replace("EventHandler", ""),
                eventHandlerSymbol.DelegateInvokeMethod.Parameters
                    .Select(param => param.Name)
                    .ToImmutableArray()))
            .ToImmutableArray();

        var behaviorAiFileContext = new BehaviorAiFileContext(fileName, eventHandlerContexts);
        _behaviorAiFileContexts[fileName] = behaviorAiFileContext;

        return behaviorAiFileContext;
    }

    private string GenerateConnectSignalMethod()
    {
        var customHandlerBuilder = new StringBuilder(1024);
        foreach (var behaviorAiFileContext in _behaviorAiFileContexts.Values)
        {
            foreach (var eventHandlerContext in behaviorAiFileContext.DelegateContext)
            {
                customHandlerBuilder.Append($@"        if (SignalName.{eventHandlerContext.SignalName}.Equals(signal))
        {{
            {eventHandlerContext.SignalName} += Get{eventHandlerContext.SignalName}EventHandler();
        }}

");
            }
        }

        //lang=c#
        var myString = @$"    private void ConnectSignal(Godot.StringName signal)
    {{
        if (Godot.GodotObject.SignalName.ScriptChanged.Equals(signal))
        {{
            ScriptChanged += () => OnSignal(Godot.GodotObject.SignalName.ScriptChanged);
        }}

        if (Godot.GodotObject.SignalName.PropertyListChanged.Equals(signal))
        {{
            PropertyListChanged += () => OnSignal(Godot.GodotObject.SignalName.PropertyListChanged);
        }}

        if (Godot.Node.SignalName.Ready.Equals(signal))
        {{
            Ready += () => OnSignal(Godot.Node.SignalName.Ready);
        }}

        if (Godot.Node.SignalName.Renamed.Equals(signal))
        {{
            Renamed += () => OnSignal(Godot.Node.SignalName.Renamed);
        }}

        if (Godot.Node.SignalName.TreeEntered.Equals(signal))
        {{
            TreeEntered += () => OnSignal(Godot.Node.SignalName.TreeEntered);
        }}

        if (Godot.Node.SignalName.TreeExiting.Equals(signal))
        {{
            TreeExiting += () => OnSignal(Godot.Node.SignalName.TreeExited);
        }}

        if (Godot.Node.SignalName.ChildEnteredTree.Equals(signal))
        {{
            ChildEnteredTree += node => OnSignal(Godot.Node.SignalName.ChildEnteredTree, node);
        }}

        if (Godot.Node.SignalName.ChildExitingTree.Equals(signal))
        {{
            ChildExitingTree += node => OnSignal(Godot.Node.SignalName.ChildExitingTree, node);
        }}
        
{customHandlerBuilder}
    }}";
        return myString;
    }

    private string GenerateDisconnectSignalMethod()
    {
        var customHandlerBuilder = new StringBuilder(1024);
        foreach (var behaviorAiFileContext in _behaviorAiFileContexts.Values)
        {
            foreach (var eventHandlerContext in behaviorAiFileContext.DelegateContext)
            {
                customHandlerBuilder.Append($@"        if (SignalName.{eventHandlerContext.SignalName}.Equals(signal))
        {{
            {eventHandlerContext.SignalName} -= Get{eventHandlerContext.SignalName}EventHandler();
        }}

");
            }
        }

        //lang=C#
        var myString = @$"    private void DisconnectSignal(Godot.StringName signal)
    {{
        if (Godot.GodotObject.SignalName.ScriptChanged.Equals(signal))
        {{
            ScriptChanged -= () => OnSignal(Godot.GodotObject.SignalName.ScriptChanged);
        }}

        if (Godot.GodotObject.SignalName.PropertyListChanged.Equals(signal))
        {{
            PropertyListChanged -= () => OnSignal(Godot.GodotObject.SignalName.PropertyListChanged);
        }}

        if (Godot.Node.SignalName.Ready.Equals(signal))
        {{
            Ready -= () => OnSignal(Godot.Node.SignalName.Ready);
        }}

        if (Godot.Node.SignalName.Renamed.Equals(signal))
        {{
            Renamed -= () => OnSignal(Godot.Node.SignalName.Renamed);
        }}

        if (Godot.Node.SignalName.TreeEntered.Equals(signal))
        {{
            TreeEntered -= () => OnSignal(Godot.Node.SignalName.TreeEntered);
        }}

        if (Godot.Node.SignalName.TreeExiting.Equals(signal))
        {{
            TreeExiting -= () => OnSignal(Godot.Node.SignalName.TreeExited);
        }}

        if (Godot.Node.SignalName.ChildEnteredTree.Equals(signal))
        {{
            ChildEnteredTree -= node => OnSignal(Godot.Node.SignalName.ChildEnteredTree, node);
        }}

        if (Godot.Node.SignalName.ChildExitingTree.Equals(signal))
        {{
            ChildExitingTree -= node => OnSignal(Godot.Node.SignalName.ChildExitingTree, node);
        }}
        
{customHandlerBuilder}
    }}";
        return myString;
    }

    private string GenerateStaticField()
    {
        var customSignalName2Id = new StringBuilder(1024);
        var customSignalId2Name = new StringBuilder(1024);
        var id = 10;
        foreach (var behaviorAiFileContext in _behaviorAiFileContexts.Values)
        {
            foreach (var eventHandlerContext in behaviorAiFileContext.DelegateContext)
            {
                customSignalName2Id.Append($"        {{ \"{eventHandlerContext.SignalName}\", {id} }},\n");
                customSignalId2Name.Append($"        {{ {id}, \"{eventHandlerContext.SignalName}\" }},\n");

                id++;
            }
        }

        customSignalName2Id.Length -= 1;
        customSignalId2Name.Length -= 1;
        
        var signalName2Id = @$"    public static readonly System.Collections.Generic.Dictionary<string, int> SignalName2Id = new()
    {{
        {{ ""script_changed"", 1 }},
        {{ ""property_list_changed"", 2 }},
        {{ ""ready"", 3 }},
        {{ ""renamed"", 4 }},
        {{ ""tree_entered"", 5 }},
        {{ ""tree_exiting"", 6 }},
        {{ ""tree_exited"", 7 }},
        {{ ""child_entered_tree"", 8 }},
        {{ ""child_exiting_tree"", 9 }},
{customSignalName2Id}
    }};";
        
        var signalId2Name = @$"    public static readonly System.Collections.Generic.Dictionary<int, string> SignalId2Name = new()
    {{
        {{ 1, ""script_changed"" }},
        {{ 2, ""property_list_changed"" }},
        {{ 3, ""ready"" }},
        {{ 4, ""renamed"" }},
        {{ 5, ""tree_entered"" }},
        {{ 6, ""tree_exiting"" }},
        {{ 7, ""tree_exited"" }},
        {{ 8, ""child_entered_tree"" }},
        {{ 9, ""child_exiting_tree"" }},
{customSignalId2Name}
    }};";
        
        return signalName2Id + "\n\n" + signalId2Name;
    }
}